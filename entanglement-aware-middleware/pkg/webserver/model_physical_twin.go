/*
 * webserver
 *
 * rest api
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package webserver

type PhysicalTwin struct {
	Name string `json:"name"`

	Metadata map[string]interface{} `json:"metadata"`
}

// AssertPhysicalTwinRequired checks if the required fields are not zero-ed
func AssertPhysicalTwinRequired(obj PhysicalTwin) error {
	elements := map[string]interface{}{
		"name":     obj.Name,
		"metadata": obj.Metadata,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecursePhysicalTwinRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of PhysicalTwin (e.g. [][]PhysicalTwin), otherwise ErrTypeAssertionError is thrown.
func AssertRecursePhysicalTwinRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aPhysicalTwin, ok := obj.(PhysicalTwin)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertPhysicalTwinRequired(aPhysicalTwin)
	})
}
